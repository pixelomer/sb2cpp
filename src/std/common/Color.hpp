#ifndef SMALLBASIC_COMMON_COLOR_H
#define SMALLBASIC_COMMON_COLOR_H

#include "Mixed.hpp"
#include <stdint.h>

namespace SmallBasic {
	class Color {
	private:
		static std::map<String, std::vector<uint8_t>> _colors;
		Color(uint8_t r, uint8_t g, uint8_t b, String const& name): r(r), g(g), b(b),
			name(name) {}
		Color(std::vector<uint8_t> &comps, String const& name): r(comps[0]), g(comps[1]),
			b(comps[2]) {}
	public:
		static String _NameFor(uint8_t r, uint8_t g, uint8_t b) {
			wchar_t str[8];
			std::swprintf(str, 8, L"#%02hhX%02hhX%02hhX", r, g, b);
			str[7] = L'\0';
			return str;
		}
		uint8_t r, g, b;
		String name;
		Color &operator=(Color const& color) {
			r = color.r;
			g = color.g;
			b = color.b;
			name = color.name;
			return *this;
		}
		Color(String name = L"black"): r(0), g(0), b(0) {
			this->name = name;
			std::transform(name.begin(), name.end(), name.begin(), std::towlower);
			if (_colors.count(name) != 0) {
				this->r = _colors[name][0];
				this->g = _colors[name][1];
				this->b = _colors[name][2];
			}
			else if (name.length() > 0 && name[0] == L'#') {
				if (name.length() == 4) {
					this->r = std::stoi(name.substr(1, 1), nullptr, 16) << 4;
					this->g = std::stoi(name.substr(2, 1), nullptr, 16) << 4;
					this->b = std::stoi(name.substr(3, 1), nullptr, 16) << 4;
				}
				else if (name.length() == 7) {
					this->r = std::stoi(name.substr(1, 2), nullptr, 16);
					this->g = std::stoi(name.substr(3, 2), nullptr, 16);
					this->b = std::stoi(name.substr(5, 2), nullptr, 16);
				}
			}
			else {
				std::wcout << L"Unrecognized color: " << name << std::endl;
			}
		}
		Color(uint8_t r, uint8_t g, uint8_t b): r(r), g(g), b(b) {
			name = _NameFor(r, g, b);
		}
	};

	// Retrieved from https://www.w3schools.com/colors/colors_groups.asp
	/*
	[...document.body.getElementsByTagName("tr")].map((tag) =>
	tag.getElementsByTagName("td")).filter((tags) => tags?.[2]?
	.getAttribute("bgcolor") != null).map((tags) => ({ name:
	tags[0].innerText.trim().toLowerCase(), hex: tags[2].getAttribute("bgcolor")
	})).map((a) => `{ L"${a.name}", { 0x${a.hex.slice(1,3)},
	0x${a.hex.slice(3,5)}, 0x${a.hex.slice(5,7)} } },` ).join("\n")
	*/
	std::map<String, std::vector<uint8_t>> Color::_colors = {
		{ L"pink", { 0xFF, 0xC0, 0xCB } },
		{ L"lightpink", { 0xFF, 0xB6, 0xC1 } },
		{ L"hotpink", { 0xFF, 0x69, 0xB4 } },
		{ L"deeppink", { 0xFF, 0x14, 0x93 } },
		{ L"palevioletred", { 0xDB, 0x70, 0x93 } },
		{ L"mediumvioletred", { 0xC7, 0x15, 0x85 } },
		{ L"lavender", { 0xE6, 0xE6, 0xFA } },
		{ L"thistle", { 0xD8, 0xBF, 0xD8 } },
		{ L"plum", { 0xDD, 0xA0, 0xDD } },
		{ L"orchid", { 0xDA, 0x70, 0xD6 } },
		{ L"violet", { 0xEE, 0x82, 0xEE } },
		{ L"fuchsia", { 0xFF, 0x00, 0xFF } },
		{ L"magenta", { 0xFF, 0x00, 0xFF } },
		{ L"mediumorchid", { 0xBA, 0x55, 0xD3 } },
		{ L"darkorchid", { 0x99, 0x32, 0xCC } },
		{ L"darkviolet", { 0x94, 0x00, 0xD3 } },
		{ L"blueviolet", { 0x8A, 0x2B, 0xE2 } },
		{ L"darkmagenta", { 0x8B, 0x00, 0x8B } },
		{ L"purple", { 0x80, 0x00, 0x80 } },
		{ L"mediumpurple", { 0x93, 0x70, 0xDB } },
		{ L"mediumslateblue", { 0x7B, 0x68, 0xEE } },
		{ L"slateblue", { 0x6A, 0x5A, 0xCD } },
		{ L"darkslateblue", { 0x48, 0x3D, 0x8B } },
		{ L"rebeccapurple", { 0x66, 0x33, 0x99 } },
		{ L"indigo", { 0x4B, 0x00, 0x82 } },
		{ L"lightsalmon", { 0xFF, 0xA0, 0x7A } },
		{ L"salmon", { 0xFA, 0x80, 0x72 } },
		{ L"darksalmon", { 0xE9, 0x96, 0x7A } },
		{ L"lightcoral", { 0xF0, 0x80, 0x80 } },
		{ L"indianred", { 0xCD, 0x5C, 0x5C } },
		{ L"crimson", { 0xDC, 0x14, 0x3C } },
		{ L"red", { 0xFF, 0x00, 0x00 } },
		{ L"firebrick", { 0xB2, 0x22, 0x22 } },
		{ L"darkred", { 0x8B, 0x00, 0x00 } },
		{ L"orange", { 0xFF, 0xA5, 0x00 } },
		{ L"darkorange", { 0xFF, 0x8C, 0x00 } },
		{ L"coral", { 0xFF, 0x7F, 0x50 } },
		{ L"tomato", { 0xFF, 0x63, 0x47 } },
		{ L"orangered", { 0xFF, 0x45, 0x00 } },
		{ L"gold", { 0xFF, 0xD7, 0x00 } },
		{ L"yellow", { 0xFF, 0xFF, 0x00 } },
		{ L"lightyellow", { 0xFF, 0xFF, 0xE0 } },
		{ L"lemonchiffon", { 0xFF, 0xFA, 0xCD } },
		{ L"lightgoldenrodyellow", { 0xFA, 0xFA, 0xD2 } },
		{ L"papayawhip", { 0xFF, 0xEF, 0xD5 } },
		{ L"moccasin", { 0xFF, 0xE4, 0xB5 } },
		{ L"peachpuff", { 0xFF, 0xDA, 0xB9 } },
		{ L"palegoldenrod", { 0xEE, 0xE8, 0xAA } },
		{ L"khaki", { 0xF0, 0xE6, 0x8C } },
		{ L"darkkhaki", { 0xBD, 0xB7, 0x6B } },
		{ L"greenyellow", { 0xAD, 0xFF, 0x2F } },
		{ L"chartreuse", { 0x7F, 0xFF, 0x00 } },
		{ L"lawngreen", { 0x7C, 0xFC, 0x00 } },
		{ L"lime", { 0x00, 0xFF, 0x00 } },
		{ L"limegreen", { 0x32, 0xCD, 0x32 } },
		{ L"palegreen", { 0x98, 0xFB, 0x98 } },
		{ L"lightgreen", { 0x90, 0xEE, 0x90 } },
		{ L"mediumspringgreen", { 0x00, 0xFA, 0x9A } },
		{ L"springgreen", { 0x00, 0xFF, 0x7F } },
		{ L"mediumseagreen", { 0x3C, 0xB3, 0x71 } },
		{ L"seagreen", { 0x2E, 0x8B, 0x57 } },
		{ L"forestgreen", { 0x22, 0x8B, 0x22 } },
		{ L"green", { 0x00, 0x80, 0x00 } },
		{ L"darkgreen", { 0x00, 0x64, 0x00 } },
		{ L"yellowgreen", { 0x9A, 0xCD, 0x32 } },
		{ L"olivedrab", { 0x6B, 0x8E, 0x23 } },
		{ L"darkolivegreen", { 0x55, 0x6B, 0x2F } },
		{ L"mediumaquamarine", { 0x66, 0xCD, 0xAA } },
		{ L"darkseagreen", { 0x8F, 0xBC, 0x8F } },
		{ L"lightseagreen", { 0x20, 0xB2, 0xAA } },
		{ L"darkcyan", { 0x00, 0x8B, 0x8B } },
		{ L"teal", { 0x00, 0x80, 0x80 } },
		{ L"aqua", { 0x00, 0xFF, 0xFF } },
		{ L"cyan", { 0x00, 0xFF, 0xFF } },
		{ L"lightcyan", { 0xE0, 0xFF, 0xFF } },
		{ L"paleturquoise", { 0xAF, 0xEE, 0xEE } },
		{ L"aquamarine", { 0x7F, 0xFF, 0xD4 } },
		{ L"turquoise", { 0x40, 0xE0, 0xD0 } },
		{ L"mediumturquoise", { 0x48, 0xD1, 0xCC } },
		{ L"darkturquoise", { 0x00, 0xCE, 0xD1 } },
		{ L"cadetblue", { 0x5F, 0x9E, 0xA0 } },
		{ L"steelblue", { 0x46, 0x82, 0xB4 } },
		{ L"lightsteelblue", { 0xB0, 0xC4, 0xDE } },
		{ L"lightblue", { 0xAD, 0xD8, 0xE6 } },
		{ L"powderblue", { 0xB0, 0xE0, 0xE6 } },
		{ L"lightskyblue", { 0x87, 0xCE, 0xFA } },
		{ L"skyblue", { 0x87, 0xCE, 0xEB } },
		{ L"cornflowerblue", { 0x64, 0x95, 0xED } },
		{ L"deepskyblue", { 0x00, 0xBF, 0xFF } },
		{ L"dodgerblue", { 0x1E, 0x90, 0xFF } },
		{ L"royalblue", { 0x41, 0x69, 0xE1 } },
		{ L"blue", { 0x00, 0x00, 0xFF } },
		{ L"mediumblue", { 0x00, 0x00, 0xCD } },
		{ L"darkblue", { 0x00, 0x00, 0x8B } },
		{ L"navy", { 0x00, 0x00, 0x80 } },
		{ L"midnightblue", { 0x19, 0x19, 0x70 } },
		{ L"cornsilk", { 0xFF, 0xF8, 0xDC } },
		{ L"blanchedalmond", { 0xFF, 0xEB, 0xCD } },
		{ L"bisque", { 0xFF, 0xE4, 0xC4 } },
		{ L"navajowhite", { 0xFF, 0xDE, 0xAD } },
		{ L"wheat", { 0xF5, 0xDE, 0xB3 } },
		{ L"burlywood", { 0xDE, 0xB8, 0x87 } },
		{ L"tan", { 0xD2, 0xB4, 0x8C } },
		{ L"rosybrown", { 0xBC, 0x8F, 0x8F } },
		{ L"sandybrown", { 0xF4, 0xA4, 0x60 } },
		{ L"goldenrod", { 0xDA, 0xA5, 0x20 } },
		{ L"darkgoldenrod", { 0xB8, 0x86, 0x0B } },
		{ L"peru", { 0xCD, 0x85, 0x3F } },
		{ L"chocolate", { 0xD2, 0x69, 0x1E } },
		{ L"olive", { 0x80, 0x80, 0x00 } },
		{ L"saddlebrown", { 0x8B, 0x45, 0x13 } },
		{ L"sienna", { 0xA0, 0x52, 0x2D } },
		{ L"brown", { 0xA5, 0x2A, 0x2A } },
		{ L"maroon", { 0x80, 0x00, 0x00 } },
		{ L"white", { 0xFF, 0xFF, 0xFF } },
		{ L"snow", { 0xFF, 0xFA, 0xFA } },
		{ L"honeydew", { 0xF0, 0xFF, 0xF0 } },
		{ L"mintcream", { 0xF5, 0xFF, 0xFA } },
		{ L"azure", { 0xF0, 0xFF, 0xFF } },
		{ L"aliceblue", { 0xF0, 0xF8, 0xFF } },
		{ L"ghostwhite", { 0xF8, 0xF8, 0xFF } },
		{ L"whitesmoke", { 0xF5, 0xF5, 0xF5 } },
		{ L"seashell", { 0xFF, 0xF5, 0xEE } },
		{ L"beige", { 0xF5, 0xF5, 0xDC } },
		{ L"oldlace", { 0xFD, 0xF5, 0xE6 } },
		{ L"floralwhite", { 0xFF, 0xFA, 0xF0 } },
		{ L"ivory", { 0xFF, 0xFF, 0xF0 } },
		{ L"antiquewhite", { 0xFA, 0xEB, 0xD7 } },
		{ L"linen", { 0xFA, 0xF0, 0xE6 } },
		{ L"lavenderblush", { 0xFF, 0xF0, 0xF5 } },
		{ L"mistyrose", { 0xFF, 0xE4, 0xE1 } },
		{ L"gainsboro", { 0xDC, 0xDC, 0xDC } },
		{ L"lightgray", { 0xD3, 0xD3, 0xD3 } },
		{ L"silver", { 0xC0, 0xC0, 0xC0 } },
		{ L"darkgray", { 0xA9, 0xA9, 0xA9 } },
		{ L"dimgray", { 0x69, 0x69, 0x69 } },
		{ L"gray", { 0x80, 0x80, 0x80 } },
		{ L"lightslategray", { 0x77, 0x88, 0x99 } },
		{ L"slategray", { 0x70, 0x80, 0x90 } },
		{ L"darkslategray", { 0x2F, 0x4F, 0x4F } },
		{ L"black", { 0x00, 0x00, 0x00 } }
	};
}

#endif